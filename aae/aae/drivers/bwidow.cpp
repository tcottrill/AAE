//==========================================================================
// AAE is a poorly written M.A.M.E (TM) derivitave based on early MAME
// code, 0.29 through .90 mixed with code of my own. This emulator was
// created solely for my amusement and learning and is provided only
// as an archival experience.
//
// All MAME code used and abused in this emulator remains the copyright
// of the dedicated people who spend countless hours creating it. All
// MAME code should be annotated as belonging to the MAME TEAM.
//
// THE CODE BELOW IS FROM MAME and COPYRIGHT the MAME TEAM.
//==========================================================================

#include "bwidow.h"
#include "aae_avg.h"
#include "earom.h"
#include "aae_pokey.h"
#include "aae_mame_driver.h"
#include "driver_registry.h"    // AAE_REGISTER_DRIVER
#include "timer.h"

#define IN_LEFT	(1 << 0)
#define IN_RIGHT (1 << 1)
#define IN_FIRE (1 << 2)
#define IN_SHIELD (1 << 3)
#define IN_THRUST (1 << 4)
#define IN_P1 (1 << 5)
#define IN_P2 (1 << 6)

void bwidow_interrupt(int dummy)
{
	//WRLOG("BWidow Interrupt");
	cpu_do_int_imm(CPU0, INT_TYPE_INT);
}

static struct POKEYinterface pokey_interface =
{
	2,			/* 2 chips */
	1512000,
	100,	/* volume */
	6, //POKEY_DEFAULT_GAIN/2
	USE_CLIP,
	/* The 8 pot handlers */
	{ 0, 0 },
	{ 0, 0 },
	{ 0, 0 },
	{ 0, 0 },
	{ 0, 0 },
	{ 0, 0 },
	{ 0, 0 },
	{ 0, 0 },
	/* The allpot handler */
	{ input_port_1_r, input_port_2_r },
};

READ_HANDLER(IN0read)
{
	int val = readinputport(0);

	//Fix this mess below later
	if (get_eterna_ticks(0) & 0x100) { bitset(val, 0x80); }
	//	else { bitclr(val, 0x80); }
	if (!avg_check())
	{
		bitclr(val, 0x40);
	}
	else
	{
		bitset(val, 0x40);
	}

	return val;
}

READ_HANDLER(SDControls)
{
	int res;
	int res1;
	int res2;

	res1 = readinputport(3);
	res2 = readinputport(4);
	res = 0x00;

	switch (address & 0x07)
	{
	case 0:
		if (res1 & IN_SHIELD) res |= 0x80;
		if (res1 & IN_FIRE) res |= 0x40;
		break;
	case 1: /* Player 2 */
		if (res2 & IN_SHIELD) res |= 0x80;
		if (res2 & IN_FIRE) res |= 0x40;
		break;
	case 2:
		if (res1 & IN_LEFT) res |= 0x80;
		if (res1 & IN_RIGHT) res |= 0x40;
		break;
	case 3: /* Player 2 */
		if (res2 & IN_LEFT) res |= 0x80;
		if (res2 & IN_RIGHT) res |= 0x40;
		break;
	case 4:
		if (res1 & IN_THRUST) res |= 0x80;
		if (res1 & IN_P1) res |= 0x40;
		break;
	case 5:  /* Player 2 */
		if (res2 & IN_THRUST) res |= 0x80;
		break;
	case 6:
		if (res1 & IN_P2) res |= 0x80;
		break;
	case 7:
		res = (0x00 /* upright */ | (0 & 0x40));
		break;
	}

	return res;
}

WRITE_HANDLER(irq_ack_w)
{
	;//write_to_log("irq_ack_w this frame");
	Machine->memory_region[CPU0][0x88c0] = data;
}

WRITE_HANDLER(avgdvg_reset_w)
{
//	LOG_INFO("AVG RESET");
}

WRITE_HANDLER(bwidow_misc_w)
{
	/*
		0x10 = p1 led
		0x20 = p2 led
		0x01 = coin counter 1
		0x02 = coin counter 2
	*/
	static int lastdata;

	if (data == lastdata) return;
	set_led_status(0, ~data & 0x10);
	set_led_status(1, ~data & 0x20);
	//coin_counter_w(0, data & 0x01);
	//coin_counter_w(1, data & 0x02);
	lastdata = data;
}

WRITE_HANDLER(spacduel_misc_w)
{
	static int lastdata;

	if (data == lastdata) return;
	set_led_status(1, ~data & 0x10);
	set_led_status(0, ~data & 0x20);
	lastdata = data;
}

void run_bwidow()
{
	pokey_sh_update();
}

MEM_READ(BwidowRead)
MEM_ADDR(0x6000, 0x600f, pokey_1_r)
MEM_ADDR(0x6800, 0x680f, pokey_2_r)
MEM_ADDR(0x7000, 0x7000, EaromRead)
MEM_ADDR(0x7800, 0x7800, IN0read)
MEM_ADDR(0x8000, 0x8000, ip_port_3_r)
MEM_ADDR(0x8800, 0x8800, ip_port_4_r)
MEM_END

MEM_WRITE(BwidowWrite)
MEM_ADDR(0x6000, 0x67ff, pokey_1_w)
MEM_ADDR(0x6800, 0x6fff, pokey_2_w)
MEM_ADDR(0x8800, 0x8800, bwidow_misc_w)
MEM_ADDR(0x8840, 0x8840, advdvg_go_w)
MEM_ADDR(0x88c0, 0x88c0, irq_ack_w)
MEM_ADDR(0x8900, 0x8900, EaromCtrl)
MEM_ADDR(0x8940, 0x897f, EaromWrite)
MEM_ADDR(0x8980, 0x89ed, watchdog_reset_w)
MEM_ADDR(0x9000, 0xffff, MWA_ROM)
MEM_END

MEM_READ(SpaceDuelRead)
MEM_ADDR(0x800, 0x800, IN0read)
MEM_ADDR(0x1000, 0x100f, pokey_1_r)
MEM_ADDR(0x1400, 0x140f, pokey_2_r)
MEM_ADDR(0x0a00, 0x0a00, EaromRead)
MEM_ADDR(0x0900, 0x0907, SDControls)
MEM_END

MEM_WRITE(SpaceDuelWrite)
MEM_ADDR(0x1000, 0x100f, pokey_1_w)
MEM_ADDR(0x1400, 0x140f, pokey_2_w)
MEM_ADDR(0x0c80, 0x0c80, advdvg_go_w)
MEM_ADDR(0x0c00, 0x0c00, spacduel_misc_w)
MEM_ADDR(0x0d00, 0x0d00, watchdog_reset_w)
MEM_ADDR(0x0d80, 0x0d80, avgdvg_reset_w)
MEM_ADDR(0x0e00, 0x0e00, irq_ack_w)
MEM_ADDR(0x0f00, 0x0f3f, EaromWrite)
MEM_ADDR(0x0e80, 0x0e80, EaromCtrl)
MEM_ADDR(0x2800, 0x8fff, MWA_ROM)
MEM_ADDR(0xf000, 0xffff, MWA_ROM)
MEM_ADDR(0x0905, 0x0906, MWA_ROM)
MEM_END

int init_bwidow()
{
	pokey_sh_start(&pokey_interface);
	//init6502(BwidowRead, BwidowWrite, 0xffff, CPU0);
	avg_start();
	timer_set(TIME_IN_HZ(246), CPU0, bwidow_interrupt);
	return 1;
}
/////////////////// MAIN() for program ///////////////////////////////////////////////////
int init_spacduel()
{
	pokey_sh_start(&pokey_interface);
	//init6502(SpaceDuelRead, SpaceDuelWrite, 0xffff, CPU0);
	avg_start();
	timer_set(TIME_IN_HZ(246), CPU0, bwidow_interrupt);
	return 1;
}
void end_bwidow()
{
	pokey_sh_stop();
}
//////////////////  END OF MAIN PROGRAM /////////////////////////////////////////////

INPUT_PORTS_START(bwidow)
PORT_START("IN0")	/* IN0 */
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_COIN1)
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_COIN2)
PORT_BIT(0x0c, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BITX(0x10, 0x10, IPT_DIPSWITCH_NAME | IPF_TOGGLE, "Service Mode", OSD_KEY_F2, IP_JOY_NONE)
PORT_DIPSETTING(0x10, "Off")
PORT_DIPSETTING(0x00, "On")
PORT_BITX(0x20, IP_ACTIVE_LOW, IPT_SERVICE, "Diagnostic Step", OSD_KEY_F1, IP_JOY_NONE)
/* bit 6 is the VG HALT bit. We set it to "low" */
/* per default (busy vector processor). */
PORT_BIT(0x40, IP_ACTIVE_HIGH, IPT_UNKNOWN)
/* bit 7 is tied to a 3khz clock */
PORT_BIT(0x80, IP_ACTIVE_HIGH, IPT_UNKNOWN)

PORT_START("DSW0")	/* DSW0 */
PORT_DIPNAME(0x03, 0x00, "Coinage")
PORT_DIPSETTING(0x00, "1 Coin/1 Credit")
PORT_DIPSETTING(0x01, "2 Coins/1 Credit")
PORT_DIPSETTING(0x02, "Free Play")
PORT_DIPSETTING(0x03, "1 Coin/2 Credits")
PORT_DIPNAME(0x0c, 0x00, "Right Coin")
PORT_DIPSETTING(0x00, "*1")
PORT_DIPSETTING(0x04, "*4")
PORT_DIPSETTING(0x08, "*5")
PORT_DIPSETTING(0x0c, "*6")
PORT_DIPNAME(0x10, 0x00, "Left Coin")
PORT_DIPSETTING(0x00, "*1")
PORT_DIPSETTING(0x10, "*2")
PORT_DIPNAME(0xe0, 0x00, "Bonus Coins")
PORT_DIPSETTING(0x00, "None")
PORT_DIPSETTING(0x20, "3 credits/2 coins")
PORT_DIPSETTING(0x40, "5 credits/4 coins")
PORT_DIPSETTING(0x60, "6 credits/4 coins")
PORT_DIPSETTING(0x80, "6 credits/6 coins")
PORT_DIPSETTING(0xa0, "4 credits/3 coins")

PORT_START("DSW1")	/* DSW1 */
PORT_DIPNAME(0x03, 0x01, "Max Start")
PORT_DIPSETTING(0x00, "Lev 13")
PORT_DIPSETTING(0x01, "Lev 21")
PORT_DIPSETTING(0x02, "Lev 37")
PORT_DIPSETTING(0x03, "Lev 53")
PORT_DIPNAME(0x0c, 0x00, DEF_STR(Lives))
PORT_DIPSETTING(0x00, "3")
PORT_DIPSETTING(0x04, "4")
PORT_DIPSETTING(0x08, "5")
PORT_DIPSETTING(0x0c, "6")
PORT_DIPNAME(0x30, 0x10, "Difficulty")
PORT_DIPSETTING(0x00, "Easy")
PORT_DIPSETTING(0x10, "Medium")
PORT_DIPSETTING(0x20, "Hard")
PORT_DIPSETTING(0x30, "Demo")
PORT_DIPNAME(0xc0, 0x00, "Bonus Life")
PORT_DIPSETTING(0x00, "20000")
PORT_DIPSETTING(0x40, "30000")
PORT_DIPSETTING(0x80, "40000")
PORT_DIPSETTING(0xc0, "None")

PORT_START("IN3")	/* IN3 - Movement joystick */
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_RIGHT)
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_LEFT)
PORT_BIT(0x04, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_DOWN)
PORT_BIT(0x08, IP_ACTIVE_LOW, IPT_JOYSTICKLEFT_UP)
PORT_BIT(0x10, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x20, IP_ACTIVE_LOW, IPT_START1)
PORT_BIT(0x40, IP_ACTIVE_LOW, IPT_START2)
PORT_BIT(0x80, IP_ACTIVE_LOW, IPT_UNUSED)

PORT_START("IN4")	/* IN4 - Firing joystick */
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_RIGHT)
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_LEFT)
PORT_BIT(0x04, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_DOWN)
PORT_BIT(0x08, IP_ACTIVE_LOW, IPT_JOYSTICKRIGHT_UP)
PORT_BIT(0x10, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x20, IP_ACTIVE_LOW, IPT_START1)
PORT_BIT(0x40, IP_ACTIVE_LOW, IPT_START2)
PORT_BIT(0x80, IP_ACTIVE_LOW, IPT_UNUSED)
INPUT_PORTS_END

/////////////////////////////////////////////////////////////////////////
INPUT_PORTS_START(gravitar)
PORT_START("IN0")	/* IN0 */
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_COIN1)
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_COIN2)
PORT_BIT(0x0c, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BITX(0x10, 0x10, IPT_DIPSWITCH_NAME | IPF_TOGGLE, DEF_STR(Service_Mode), OSD_KEY_F2, IP_JOY_NONE)
PORT_DIPSETTING(0x10, DEF_STR(Off))
PORT_DIPSETTING(0x00, DEF_STR(On))
PORT_BITX(0x20, IP_ACTIVE_LOW, IPT_SERVICE, "Diagnostic Step", OSD_KEY_F1, IP_JOY_NONE)
/* bit 6 is the VG HALT bit. We set it to "low" */
/* per default (busy vector processor). */
PORT_BIT(0x40, IP_ACTIVE_HIGH, IPT_UNKNOWN)
/* bit 7 is tied to a 3khz clock */
PORT_BIT(0x80, IP_ACTIVE_HIGH, IPT_UNKNOWN)

PORT_START("DSW0")	/* DSW0 */
PORT_BIT(0x03, IP_ACTIVE_HIGH, IPT_UNUSED)
PORT_DIPNAME(0x0c, 0x04, DEF_STR(Lives))
PORT_DIPSETTING(0x00, "3")
PORT_DIPSETTING(0x04, "4")
PORT_DIPSETTING(0x08, "5")
PORT_DIPSETTING(0x0c, "6")
PORT_DIPNAME(0x10, 0x00, DEF_STR(Difficulty))
PORT_DIPSETTING(0x00, "Easy")
PORT_DIPSETTING(0x10, "Hard")
PORT_BIT(0x20, IP_ACTIVE_HIGH, IPT_UNUSED)
PORT_DIPNAME(0xc0, 0x00, DEF_STR(Bonus_Life))
PORT_DIPSETTING(0x00, "10000")
PORT_DIPSETTING(0x40, "20000")
PORT_DIPSETTING(0x80, "30000")
PORT_DIPSETTING(0xc0, "None")

PORT_START("DSW1")	/* DSW1 */
PORT_DIPNAME(0x03, 0x00, DEF_STR(Coinage))
PORT_DIPSETTING(0x01, DEF_STR(2C_1C))
PORT_DIPSETTING(0x00, DEF_STR(1C_1C))
PORT_DIPSETTING(0x03, DEF_STR(1C_2C))
PORT_DIPSETTING(0x02, DEF_STR(Free_Play))
PORT_DIPNAME(0x0c, 0x00, DEF_STR(Coin_B))
PORT_DIPSETTING(0x00, "*1")
PORT_DIPSETTING(0x04, "*4")
PORT_DIPSETTING(0x08, "*5")
PORT_DIPSETTING(0x0c, "*6")
PORT_DIPNAME(0x10, 0x00, DEF_STR(Coin_A))
PORT_DIPSETTING(0x00, "*1")
PORT_DIPSETTING(0x10, "*2")
PORT_DIPNAME(0xe0, 0x00, "Bonus Coins")
PORT_DIPSETTING(0x00, "None")
PORT_DIPSETTING(0x20, "3 credits/2 coins")
PORT_DIPSETTING(0x40, "5 credits/4 coins")
PORT_DIPSETTING(0x60, "6 credits/4 coins")
PORT_DIPSETTING(0x80, "6 credits/6 coins")
PORT_DIPSETTING(0xa0, "4 credits/3 coins")

PORT_START("IN3")	/* IN3 - Player 1 */
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_BUTTON3)
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_BUTTON1)
PORT_BIT(0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_2WAY)
PORT_BIT(0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_2WAY)
PORT_BIT(0x10, IP_ACTIVE_LOW, IPT_BUTTON2)
PORT_BIT(0x20, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x40, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x80, IP_ACTIVE_LOW, IPT_UNUSED)

PORT_START("IN4")	/* IN4 - Player 2 */
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x04, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x08, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x10, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x20, IP_ACTIVE_LOW, IPT_START1)
PORT_BIT(0x40, IP_ACTIVE_LOW, IPT_START2)
PORT_BIT(0x80, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_START("IN2")      /* IN2 */
PORT_ANALOG(0x0f, 0, IPT_TRACKBALL_Y | IPF_REVERSE, 20, 10, 7, 0, 0)

PORT_START("IN3")      /* IN3 */
PORT_ANALOG(0x0f, 0, IPT_TRACKBALL_X, 20, 10, 7, 0, 0)
INPUT_PORTS_END

///////////////////////////////////////////////////////////////////////////////////

INPUT_PORTS_START(lunarbat) // Lunarbat and Lunarba1 have different key configs.
PORT_START("IN0")
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_COIN2)	// To be similar with other games
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_COIN1)	// To be similar with other games
PORT_BIT(0x0c, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_SERVICE(0x10, IP_ACTIVE_LOW)
PORT_BIT(0x20, IP_ACTIVE_LOW, IPT_UNKNOWN)
/* bit 6 is the VG HALT bit. We set it to "low" */
/* per default (busy vector processor). */
PORT_BIT(0x40, IP_ACTIVE_HIGH, IPT_UNKNOWN)
/* bit 7 is tied to a 3khz clock */
PORT_BIT(0x80, IP_ACTIVE_HIGH, IPT_UNKNOWN)

PORT_START("DSW0")	/* DSW0 - Not read */
PORT_BIT(0xff, IP_ACTIVE_LOW, IPT_UNUSED)

PORT_START("DSW1")	/* DSW1 - Not read */
PORT_BIT(0xff, IP_ACTIVE_LOW, IPT_UNUSED)

PORT_START("IN3")
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_BUTTON3)
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_BUTTON1)
PORT_BIT(0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT | IPF_2WAY)
PORT_BIT(0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT | IPF_2WAY)
PORT_BIT(0x10, IP_ACTIVE_LOW, IPT_BUTTON2)
PORT_BIT(0x20, IP_ACTIVE_LOW, IPT_START1)
PORT_BIT(0x40, IP_ACTIVE_LOW, IPT_START2)
PORT_BIT(0x80, IP_ACTIVE_LOW, IPT_UNUSED)

PORT_START("IN4")	/* IN4 - Not read */
//PORT_BIT(0xff, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x04, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x08, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x10, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_BIT(0x20, IP_ACTIVE_LOW, IPT_START1)
PORT_BIT(0x40, IP_ACTIVE_LOW, IPT_START2)
PORT_BIT(0x80, IP_ACTIVE_LOW, IPT_UNUSED)
INPUT_PORTS_END

INPUT_PORTS_START(lunarba1)
PORT_START("IN0")
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_COIN2)	// To be similar with other games
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_COIN1)	// To be similar with other games
PORT_BIT(0x0c, IP_ACTIVE_LOW, IPT_UNUSED)
PORT_SERVICE(0x10, IP_ACTIVE_LOW)
PORT_BIT(0x20, IP_ACTIVE_LOW, IPT_UNKNOWN)
/* bit 6 is the VG HALT bit. We set it to "low" */
/* per default (busy vector processor). */
PORT_BIT(0x40, IP_ACTIVE_HIGH, IPT_UNKNOWN)
/* bit 7 is tied to a 3khz clock */
PORT_BIT(0x80, IP_ACTIVE_HIGH, IPT_UNKNOWN)

PORT_START("DSW0")	/* DSW0 - Not read */
PORT_BIT(0xff, IP_ACTIVE_LOW, IPT_UNUSED)

PORT_START("DSW1")	/* DSW1 - Not read */
PORT_BIT(0xff, IP_ACTIVE_LOW, IPT_UNUSED)

PORT_START("IN3")
PORT_BIT(0x01, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_2WAY)
PORT_BIT(0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_2WAY)
PORT_BIT(0x04, IP_ACTIVE_HIGH, IPT_BUTTON1)
PORT_BIT(0x08, IP_ACTIVE_HIGH, IPT_BUTTON3)
PORT_BIT(0x10, IP_ACTIVE_HIGH, IPT_BUTTON2)
PORT_BIT(0x20, IP_ACTIVE_HIGH, IPT_START1)
PORT_BIT(0x40, IP_ACTIVE_HIGH, IPT_START2)
PORT_BIT(0x80, IP_ACTIVE_HIGH, IPT_UNUSED)

PORT_START("IN4")	/* IN4 - Not read */
PORT_BIT(0xff, IP_ACTIVE_LOW, IPT_UNUSED)
INPUT_PORTS_END


/////////////////////////////////////////////////////////////////////////////////
INPUT_PORTS_START(spacduel)
PORT_START("IN0")	/* IN0 */
PORT_BIT(0x01, IP_ACTIVE_LOW, IPT_COIN1)
PORT_BIT(0x02, IP_ACTIVE_LOW, IPT_COIN2)
PORT_BIT(0x0c, IP_ACTIVE_LOW, IPT_UNUSED)
//PORT_SERVICE( 0x10, IP_ACTIVE_LOW )
PORT_BITX(0x10, 0x10, IPT_DIPSWITCH_NAME | IPF_TOGGLE, DEF_STR(Service_Mode), OSD_KEY_F2, IP_JOY_NONE)
PORT_DIPSETTING(0x10, DEF_STR(Off))
PORT_DIPSETTING(0x00, DEF_STR(On))
PORT_BITX(0x20, IP_ACTIVE_LOW, IPT_SERVICE, "Diagnostic Step", OSD_KEY_F1, IP_JOY_NONE)
/* bit 6 is the VG HALT bit. We set it to "low" */
/* per default (busy vector processor). */
PORT_BIT(0x40, IP_ACTIVE_HIGH, IPT_UNKNOWN)
/* bit 7 is tied to a 3kHz clock */
PORT_BIT(0x80, IP_ACTIVE_HIGH, IPT_UNKNOWN)

PORT_START("DSW0")	/* DSW0 */
PORT_DIPNAME(0x03, 0x01, DEF_STR(Lives))
PORT_DIPSETTING(0x01, "3")
PORT_DIPSETTING(0x00, "4")
PORT_DIPSETTING(0x03, "5")
PORT_DIPSETTING(0x02, "6")
PORT_DIPNAME(0x0c, 0x00, DEF_STR(Difficulty))
PORT_DIPSETTING(0x04, "Easy")
PORT_DIPSETTING(0x00, "Normal")
PORT_DIPSETTING(0x0c, "Medium")
PORT_DIPSETTING(0x08, "Hard")
PORT_DIPNAME(0x30, 0x00, "Language")
PORT_DIPSETTING(0x00, "English")
PORT_DIPSETTING(0x10, "German")
PORT_DIPSETTING(0x20, "French")
PORT_DIPSETTING(0x30, "Spanish")
PORT_DIPNAME(0xc0, 0x00, DEF_STR(Bonus_Life))
PORT_DIPSETTING(0xc0, "8000")
PORT_DIPSETTING(0x00, "10000")
PORT_DIPSETTING(0x40, "15000")
PORT_DIPSETTING(0x80, "None")

PORT_START("DSW1")	/* DSW1 */
PORT_DIPNAME(0x03, 0x00, DEF_STR(Coinage))
PORT_DIPSETTING(0x01, DEF_STR(2C_1C))
PORT_DIPSETTING(0x00, DEF_STR(1C_1C))
PORT_DIPSETTING(0x03, DEF_STR(1C_2C))
PORT_DIPSETTING(0x02, DEF_STR(Free_Play))
PORT_DIPNAME(0x0c, 0x00, DEF_STR(Coin_B))
PORT_DIPSETTING(0x00, "*1")
PORT_DIPSETTING(0x04, "*4")
PORT_DIPSETTING(0x08, "*5")
PORT_DIPSETTING(0x0c, "*6")
PORT_DIPNAME(0x10, 0x00, DEF_STR(Coin_A))
PORT_DIPSETTING(0x00, "*1")
PORT_DIPSETTING(0x10, "*2")
PORT_DIPNAME(0xe0, 0x00, "Bonus Coins")
PORT_DIPSETTING(0x00, "None")
PORT_DIPSETTING(0x20, "3 credits/2 coins")
PORT_DIPSETTING(0xa0, "4 credits/3 coins")
PORT_DIPSETTING(0x40, "5 credits/4 coins")
PORT_DIPSETTING(0x60, "6 credits/4 coins")
PORT_DIPSETTING(0x80, "6 credits/6 coins")

PORT_START("IN3")	// IN3 - Player 1 - spread over 8 memory locations
PORT_BIT(0x01, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_2WAY)
PORT_BIT(0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_2WAY)
PORT_BIT(0x04, IP_ACTIVE_HIGH, IPT_BUTTON1)
PORT_BIT(0x08, IP_ACTIVE_HIGH, IPT_BUTTON3)
PORT_BIT(0x10, IP_ACTIVE_HIGH, IPT_BUTTON2)
PORT_BIT(0x20, IP_ACTIVE_HIGH, IPT_START1)
PORT_BIT(0x40, IP_ACTIVE_HIGH, IPT_START2)
PORT_BIT(0x80, IP_ACTIVE_HIGH, IPT_UNUSED)

PORT_START("IN4")	// IN4 - Player 2 - spread over 8 memory locations
PORT_BIT(0x01, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_2WAY | IPF_PLAYER2)
PORT_BIT(0x02, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_2WAY | IPF_PLAYER2)
PORT_BIT(0x04, IP_ACTIVE_HIGH, IPT_BUTTON1 | IPF_PLAYER2)
PORT_BIT(0x08, IP_ACTIVE_HIGH, IPT_BUTTON2 | IPF_PLAYER2)
PORT_BIT(0x10, IP_ACTIVE_HIGH, IPT_BUTTON3 | IPF_PLAYER2)
PORT_BIT(0x20, IP_ACTIVE_HIGH, IPT_START1)
PORT_BIT(0x40, IP_ACTIVE_HIGH, IPT_START2)
PORT_BIT(0x80, IP_ACTIVE_HIGH, IPT_UNUSED)
INPUT_PORTS_END

//ROMS

ROM_START(bwidow)
ROM_REGION(0x10000, REGION_CPU1, 0)
ROM_LOAD("136017-107.l7", 0x2800, 0x0800, CRC(97f6000c) SHA1(bbae93058228820ee67b05f23e45fb54ee0963ff))
ROM_LOAD("136017-108.mn7", 0x3000, 0x1000, CRC(3da354ed) SHA1(935295d66ad40ad702eb7a694296e836f53d22ec))
ROM_LOAD("136017-109.np7", 0x4000, 0x1000, CRC(2fc4ce79) SHA1(2b324877bf55151747eaacd9a58f846712bfbc14))
ROM_LOAD("136017-110.r7", 0x5000, 0x1000, CRC(dd52987) SHA1(72aa1d24f20cc86701189df486488edc434b1be1))
ROM_LOAD("136017-101.d1", 0x9000, 0x1000, CRC(fe3febb7) SHA1(b62f7622ca60248e1b8376ee135ae3d94d0b4437))
ROM_LOAD("136017-102.ef1", 0xa000, 0x1000, CRC(10ad0376) SHA1(614c74daa468a7430ed965a3a9d07b6ad846016c))
ROM_LOAD("136017-103.h1", 0xb000, 0x1000, CRC(8a1430ee) SHA1(3aa6c40721a4289c1cf01f37c89b6b0a96336c68))
ROM_LOAD("136017-104.j1", 0xc000, 0x1000, CRC(44f9943f) SHA1(e83d8242e4592149719be6a68cf3aba46116072f))
ROM_LOAD("136017-105.kl1", 0xd000, 0x1000, CRC(1fdf801c) SHA1(33da2ba3cefa3d0dddc8647f9b6caf5d5bfe9b3b))
ROM_LOAD("136017-106.m1", 0xe000, 0x1000, CRC(ccc9b26c) SHA1(f1398e3ff2b62af1509bc117028845b671ff1ca2))
ROM_RELOAD(0xf000, 0x1000)
/* AVG PROM */
ROM_REGION(0x100, REGION_PROMS, 0)
ROM_LOAD("136002-125.n4", 0x0000, 0x0100, CRC(5903af03) SHA1(24bc0366f394ad0ec486919212e38be0f08d0239))
ROM_END

// NOT WORKING
/*
ROM_START(bwidowp)
ROM_REGION(0x10000, 0)
ROM_LOAD("vg4800", 0x4800, 0x0800, CRC(12c0e382) SHA1(b0a899d013ad00ff5f861da9897780c5f0c5d221))
ROM_LOAD("vg5000", 0x5000, 0x1000, CRC(7009106a) SHA1(d41d147eccb2bb4e0a3e9bb184c2bfd09c80b92f))
ROM_RELOAD(0x6000, 0x1000)
ROM_LOAD("a000", 0xa000, 0x1000, CRC(ebe0ace2) SHA1(fa919797c243d06761e3fa04b548679b310f0542))
ROM_LOAD("b000", 0xb000, 0x1000, CRC(b14f33e2) SHA1(f8b2c6cc6907b379786e246ccd559316d3edffb3))
ROM_LOAD("c000", 0xc000, 0x1000, CRC(79b8af00) SHA1(53e31962d2124bfe06afc6374d5fb2d87bf9e952))
ROM_LOAD("d000", 0xd000, 0x1000, CRC(10ac77c3) SHA1(f7b832974c224341f67fc4c3d151d8978774b462))
ROM_LOAD("e000", 0xe000, 0x1000, CRC(dfdda385) SHA1(ac77411722842033027b1717ac1b494507153e55))
ROM_RELOAD(0xf000, 0x1000) // for reset/interrupt vectors
ROM_REGION(0x100, REGION_PROMS, 0)
ROM_LOAD("avgsmr", 0x0000, 0x0100, CRC(5903af03) SHA1(24bc0366f394ad0ec486919212e38be0f08d0239))
ROM_END
*/

ROM_START(gravitar)
ROM_REGION(0x10000, REGION_CPU1, 0)
ROM_LOAD("136010-210.l7", 0x2800, 0x0800, CRC(debcb243) SHA1(2c50cd38d60739c126f1d0d8e7fbd46a0bde6e1c))
ROM_LOAD("136010-207.mn7", 0x3000, 0x1000, CRC(4135629a) SHA1(301ddb7a34b38140a1fdffc060cb08ff57f10cf1))
ROM_LOAD("136010-208.np7", 0x4000, 0x1000, CRC(358f25d9) SHA1(9c2920cf2b73a93ac2808be654b08505037f53b1))
ROM_LOAD("136010-309.r7", 0x5000, 0x1000, CRC(4ac78df4) SHA1(5164f2a54244ce1e863d1ec0dd29bc9da7103a85))
ROM_LOAD("136010-301.d1", 0x9000, 0x1000, CRC(a2a55013) SHA1(800b52ead9f56a3e372797fbc698c8fc791398da))
ROM_LOAD("136010-302.ef1", 0xa000, 0x1000, CRC(d3700b3c) SHA1(b9e846db14fa23f8d2def97030d8b072b2bbc0be))
ROM_LOAD("136010-303.h1", 0xb000, 0x1000, CRC(8e12e3e0) SHA1(e09f58f6f36de6bf6724a1ab14ab35acbb0b3876))
ROM_LOAD("136010-304.j1", 0xc000, 0x1000, CRC(467ad5da) SHA1(822b06be6f2d6298b2b10161fbabbb2caa74b2ef))
ROM_LOAD("136010-305.kl1", 0xd000, 0x1000, CRC(840603af) SHA1(4a7124f91d3ee940686c51374a861efe6cb5d282))
ROM_LOAD("136010-306.m1", 0xe000, 0x1000, CRC(3f3805ad) SHA1(baf080deaa8eea43af2f3be71dacc63e4666c453))
ROM_RELOAD(0xf000, 0x1000)
/* AVG PROM */
ROM_REGION(0x100, REGION_PROMS, 0)
ROM_LOAD("136002-125.n4", 0x0000, 0x0100, CRC(5903af03) SHA1(24bc0366f394ad0ec486919212e38be0f08d0239))
ROM_END

ROM_START(gravitar2)
ROM_REGION(0x10000, REGION_CPU1, 0)
ROM_LOAD("136010-210.l7", 0x2800, 0x0800, CRC(debcb243) SHA1(2c50cd38d60739c126f1d0d8e7fbd46a0bde6e1c))
ROM_LOAD("136010-207.mn7", 0x3000, 0x1000, CRC(4135629a) SHA1(301ddb7a34b38140a1fdffc060cb08ff57f10cf1))
ROM_LOAD("136010-208.np7", 0x4000, 0x1000, CRC(358f25d9) SHA1(9c2920cf2b73a93ac2808be654b08505037f53b1))
ROM_LOAD("136010-209.r7", 0x5000, 0x1000, CRC(37034287) SHA1(4de7478fb566fd75f99533507228611cecb1f11a))
ROM_LOAD("136010-201.d1", 0x9000, 0x1000, CRC(167315e4) SHA1(35613e5a503fac7f451c201675669f417e15241b))
ROM_LOAD("136010-202.ef1", 0xa000, 0x1000, CRC(aaa9e62c) SHA1(87fc660adb22f812a764efc46ffcf5f934d5e333))
ROM_LOAD("136010-203.h1", 0xb000, 0x1000, CRC(ae437253) SHA1(e2402dc5fa755a05fa1d531a31b78e39e67f5cbe))
ROM_LOAD("136010-204.j1", 0xc000, 0x1000, CRC(5d6bc29e) SHA1(fdd442644209ab858eb4ed1b4cdeb1db26f80108))
ROM_LOAD("136010-205.kl1", 0xd000, 0x1000, CRC(db1ff34) SHA1(288d9ffff9d18025621be249ea25a7444f58f3a9))
ROM_LOAD("136010-206.m1", 0xe000, 0x1000, CRC(4521ca48) SHA1(5770cb46c4ac28d632ad5910723a9edda8283ce5))
ROM_RELOAD(0xf000, 0x1000) //for reset/interrupt vectors
/* AVG PROM */
ROM_REGION(0x100, REGION_PROMS, 0)
ROM_LOAD("136002-125.n4", 0x0000, 0x0100, CRC(5903af03) SHA1(24bc0366f394ad0ec486919212e38be0f08d0239))
ROM_END

ROM_START(gravp)
ROM_REGION(0x10000, REGION_CPU1, 0)
ROM_LOAD("l7.bin", 0x2800, 0x0800, CRC(1da0d845) SHA1(99bccae0521c105388784175c475035bf19270a7))
ROM_LOAD("mn7.bin", 0x3000, 0x1000, CRC(650ba31e) SHA1(7f855ea13e2041a87b64fdff4b7ee0d7d97e4401))
ROM_LOAD("np7.bin", 0x4000, 0x1000, CRC(5119c0b2) SHA1(ec8a7072d2b8e2626a19c0451ea5ddb27ad80594))
ROM_LOAD("r7.bin", 0x5000, 0x1000, CRC(defa8cbc) SHA1(ffd618d846c219fb641311f1d95ffc9f6fb5a240))
ROM_LOAD("d1.bin", 0x9000, 0x1000, CRC(acbc0e2c) SHA1(2e0ff3b7ac9c0813e71942492146372bba382f1f))
ROM_LOAD("ef1.bin", 0xa000, 0x1000, CRC(88f98f8f) SHA1(c2174deed61ae8519a02c2ac8e2969f357733cfd))
ROM_LOAD("h1.bin", 0xb000, 0x1000, CRC(68a85703) SHA1(8a7956578cb6ebbeb74facedcbcb46f86ec92000))
ROM_LOAD("j1.bin", 0xc000, 0x1000, CRC(33d19ef6) SHA1(68f95e237427959d6ef64a5b4dd1e03db7389271))
ROM_LOAD("kl1.bin", 0xd000, 0x1000, CRC(32b5806) SHA1(b719792a177e74ec49e6952e445b9cdeaca7505f))
ROM_LOAD("m1.bin", 0xe000, 0x1000, CRC(47fe97a0) SHA1(7cbde4b59abde679c28d7547700b342f25762e4a))
ROM_RELOAD(0xf000, 0x1000)
/* AVG PROM */
ROM_REGION(0x100, REGION_PROMS, 0)
ROM_LOAD("136002-125.n4", 0x0000, 0x0100, CRC(5903af03) SHA1(24bc0366f394ad0ec486919212e38be0f08d0239))
ROM_END

ROM_START(lunarbat)
ROM_REGION(0x10000, REGION_CPU1, 0)
/* Vector ROM */
ROM_LOAD("136010-010.l7", 0x2800, 0x0800, CRC(48fd38aa) SHA1(e6ec31e784c2965369161c33d00903ba027f7f20))
ROM_LOAD("136010-007.mn7", 0x3000, 0x1000, CRC(9754830e) SHA1(2e6885155a93d4eaf9a405f3eb740f2f4b30bc23))
ROM_LOAD("136010-008.np7", 0x4000, 0x1000, CRC(084aa8db) SHA1(80050f981b9a673d336bbcf712faf21b7be7e042))
/* Program ROM */
ROM_LOAD("136010-001.d1", 0x9000, 0x1000, CRC(cd7e1780) SHA1(92265a548485d140b73ef542ad66dc32cb52d42b))
ROM_LOAD("136010-002.ef1", 0xa000, 0x1000, CRC(dc813a54) SHA1(c543cae3a3ba5b00e5a8714a42b2557bc6e730cf))
ROM_LOAD("136010-003.h1", 0xb000, 0x1000, CRC(8e1fecd3) SHA1(a43cb4ea77e095227590fcefa778688093dcf135))
ROM_LOAD("136010-004.j1", 0xc000, 0x1000, CRC(c407764f) SHA1(f202a9fe6c10975bb124b4b1e902341da578da8f))
ROM_LOAD("136010-005.kl1", 0xd000, 0x1000, CRC(4feb6f81) SHA1(b852f1093e56343225c1b2b2554a93c88fc58637))
ROM_LOAD("136010-006.m1", 0xe000, 0x1000, CRC(f8ad139d) SHA1(e9e0dcb0872b19af09825a979f8b3747c9632091))
ROM_RELOAD(0xf000, 0x1000)  /* for reset/interrupt vectors */
/* AVG PROM */
ROM_REGION(0x100, REGION_PROMS, 0)
ROM_LOAD("136002-125.n4", 0x0000, 0x0100, CRC(5903af03) SHA1(24bc0366f394ad0ec486919212e38be0f08d0239))

ROM_END

ROM_START(lunarba1)
ROM_REGION(0x10000, REGION_CPU1, 0)
/* Vector ROM */
ROM_LOAD("vrom1.bin", 0x2800, 0x0800, CRC(c60634d9) SHA1(b94f056b5e73a2e015ba9a4be66dc2abee325016))
ROM_LOAD("vrom2.bin", 0x3000, 0x1000, CRC(53d9a8a2) SHA1(c33766658dd3523e99e664ef42a4ba4ab884fa80))
/* Program ROM */
ROM_LOAD("rom0.bin", 0x4000, 0x1000, CRC(cc4691c6) SHA1(72f75c75ec3f36c5c455c82593659961b5882f9f))
ROM_LOAD("rom1.bin", 0x5000, 0x1000, CRC(4df71d07) SHA1(5d71750594885641fb347bf4106b3b6ace822fb9))
ROM_LOAD("rom2.bin", 0x6000, 0x1000, CRC(c6ff04cb) SHA1(33477abacb9dfeadca20f9b9c1c2840cf31be7c3))
ROM_LOAD("rom3.bin", 0x7000, 0x1000, CRC(a7dc9d1b) SHA1(991f5b943f5c82027deadda0c4230b70f2a8ca10))
ROM_LOAD("rom4.bin", 0x8000, 0x1000, CRC(788bf976) SHA1(4dc2d92bbd232625fd8e828c876c4182ddde125d))
ROM_LOAD("rom5.bin", 0x9000, 0x1000, CRC(16121e13) SHA1(9ef59f4ffc22d5f9457b57d2f3a67d883995be98))
ROM_LOAD("rom5.bin", 0x9000, 0x1000, CRC(16121e13) SHA1(9ef59f4ffc22d5f9457b57d2f3a67d883995be98))
ROM_LOAD("rom5.bin", 0xa000, 0x1000, CRC(16121e13) SHA1(9ef59f4ffc22d5f9457b57d2f3a67d883995be98))
ROM_LOAD("rom5.bin", 0xb000, 0x1000, CRC(16121e13) SHA1(9ef59f4ffc22d5f9457b57d2f3a67d883995be98))
ROM_LOAD("rom5.bin", 0xc000, 0x1000, CRC(16121e13) SHA1(9ef59f4ffc22d5f9457b57d2f3a67d883995be98))
ROM_LOAD("rom5.bin", 0xd000, 0x1000, CRC(16121e13) SHA1(9ef59f4ffc22d5f9457b57d2f3a67d883995be98))
ROM_LOAD("rom5.bin", 0xe000, 0x1000, CRC(16121e13) SHA1(9ef59f4ffc22d5f9457b57d2f3a67d883995be98))
ROM_RELOAD(0xf000, 0x1000)   /* for reset/interrupt vectors */
/* AVG PROM */
ROM_REGION(0x100, REGION_PROMS, 0)
ROM_LOAD("136002-125.n4", 0x0000, 0x0100, CRC(5903af03) SHA1(24bc0366f394ad0ec486919212e38be0f08d0239))
ROM_END

ROM_START(spacduel)
ROM_REGION(0x10000, REGION_CPU1, 0)
/* Vector ROM */
ROM_LOAD("136006-106.r7", 0x2800, 0x0800, CRC(691122fe) SHA1(f53be76a49dba319050ca7767de3441521910e83))
ROM_LOAD("136006-107.np7", 0x3000, 0x1000, CRC(d8dd0461) SHA1(58060b20b2511d30d2ec06479d21840bdd0b53c6))
/* Program ROM */
ROM_LOAD("136006-201.r1", 0x4000, 0x1000, CRC(f4037b6e) SHA1(9bacb64d257edd31f53db878477604f50681d78f))
ROM_LOAD("136006-102.np1", 0x5000, 0x1000, CRC(4c451e8a) SHA1(c05c52bb08acccb60950a15f05c960c3bc163d3e))
ROM_LOAD("136006-103.m1", 0x6000, 0x1000, CRC(ee72da63) SHA1(d36d62cdf7fe76ee9cdbfc2e76ac5d90f22986ba))
ROM_LOAD("136006-104.kl1", 0x7000, 0x1000, CRC(e41b38a3) SHA1(9e8773e78d65d74db824cfd7108e7038f26757db))
ROM_LOAD("136006-105.j1", 0x8000, 0x1000, CRC(5652710f) SHA1(b15891d22a47ac3448d2ced40c04d0ab80606c7d))
ROM_RELOAD(0x9000, 0x1000)
ROM_RELOAD(0xa000, 0x1000)
ROM_RELOAD(0xb000, 0x1000)
ROM_RELOAD(0xc000, 0x1000)
ROM_RELOAD(0xd000, 0x1000)
ROM_RELOAD(0xe000, 0x1000)
ROM_RELOAD(0xf000, 0x1000)   /* for reset/interrupt vectors */
/* AVG PROM */
ROM_REGION(0x100, REGION_PROMS, 0)
ROM_LOAD("136002-125.n4", 0x0000, 0x0100, CRC(5903af03) SHA1(24bc0366f394ad0ec486919212e38be0f08d0239))
ROM_END

ROM_START(spacduel0)
ROM_REGION(0x10000, REGION_CPU1, 0)
/* Vector ROM */
ROM_LOAD("136006-006.r7", 0x2800, 0x0800, CRC(691122fe) SHA1(f53be76a49dba319050ca7767de3441521910e83))
ROM_LOAD("136006-007.np7", 0x3000, 0x1000, CRC(d8dd0461) SHA1(58060b20b2511d30d2ec06479d21840bdd0b53c6))
/* Program ROM */
ROM_LOAD("136006-001.r1", 0x4000, 0x1000, CRC(8f993ac8) SHA1(38b6d1ee3f19bb77b8aca24fbbae38684f194796))
ROM_LOAD("136006-002.np1", 0x5000, 0x1000, CRC(32cca051) SHA1(a01982e4362ba3dcdafd02d5403f8a190042e314))
ROM_LOAD("136006-003.m1", 0x6000, 0x1000, CRC(36624d57) SHA1(e66cbd747c2a298f402b91c2cf042a0697ff8296))
ROM_LOAD("136006-004.kl1", 0x7000, 0x1000, CRC(b322bf0b) SHA1(d67bf4e1e9b5b14b0455f37f9be11167aa3575c2))
ROM_LOAD("136006-005.j1", 0x8000, 0x1000, CRC(0edb1242) SHA1(5ec62e48d15c5baf0fb583e014cae2ec4bd5f5e4))
ROM_RELOAD(0x9000, 0x1000)
ROM_RELOAD(0xa000, 0x1000)
ROM_RELOAD(0xb000, 0x1000)
ROM_RELOAD(0xc000, 0x1000)
ROM_RELOAD(0xd000, 0x1000)
ROM_RELOAD(0xe000, 0x1000)
ROM_RELOAD(0xf000, 0x1000)   /* for reset/interrupt vectors */
/* AVG PROM */
ROM_REGION(0x100, REGION_PROMS, 0)
ROM_LOAD("136002-125.n4", 0x0000, 0x0100, CRC(5903af03) SHA1(24bc0366f394ad0ec486919212e38be0f08d0239))
ROM_END

ROM_START(spacduel1)
ROM_REGION(0x10000, REGION_CPU1, 0)
/* Vector ROM */
ROM_LOAD("136006-106.r7", 0x2800, 0x0800, CRC(691122fe) SHA1(f53be76a49dba319050ca7767de3441521910e83))
ROM_LOAD("136006-107.np7", 0x3000, 0x1000, CRC(d8dd0461) SHA1(58060b20b2511d30d2ec06479d21840bdd0b53c6))
/* Program ROM */
ROM_LOAD("136006-101.r1", 0x4000, 0x1000, CRC(cd239e6c) SHA1(b6143d979dd35a46bcb783bb0ac02d4dca30f0c2))
ROM_LOAD("136006-102.np1", 0x5000, 0x1000, CRC(4c451e8a) SHA1(c05c52bb08acccb60950a15f05c960c3bc163d3e))
ROM_LOAD("136006-103.m1", 0x6000, 0x1000, CRC(ee72da63) SHA1(d36d62cdf7fe76ee9cdbfc2e76ac5d90f22986ba))
ROM_LOAD("136006-104.kl1", 0x7000, 0x1000, CRC(e41b38a3) SHA1(9e8773e78d65d74db824cfd7108e7038f26757db))
ROM_LOAD("136006-105.j1", 0x8000, 0x1000, CRC(5652710f) SHA1(b15891d22a47ac3448d2ced40c04d0ab80606c7d))
ROM_RELOAD(0x9000, 0x1000)
ROM_RELOAD(0xa000, 0x1000)
ROM_RELOAD(0xb000, 0x1000)
ROM_RELOAD(0xc000, 0x1000)
ROM_RELOAD(0xd000, 0x1000)
ROM_RELOAD(0xe000, 0x1000)
ROM_RELOAD(0xf000, 0x1000)   /* for reset/interrupt vectors */
/* AVG PROM */
ROM_REGION(0x100, REGION_PROMS, 0)
ROM_LOAD("136002-125.n4", 0x0000, 0x0100, CRC(5903af03) SHA1(24bc0366f394ad0ec486919212e38be0f08d0239))
ROM_END

// Space Duel
AAE_DRIVER_BEGIN(drv_spacduel, "spacduel", "Space Duel")
AAE_DRIVER_ROM(rom_spacduel)
AAE_DRIVER_FUNCS(&init_spacduel, &run_bwidow, &end_bwidow)
AAE_DRIVER_INPUT(input_ports_spacduel)
AAE_DRIVER_SAMPLES_NONE()
AAE_DRIVER_ART(0)

AAE_DRIVER_CPUS(
	AAE_CPU_ENTRY(
		/*type*/     CPU_M6502,
		/*freq*/     1512000,
		/*div*/      100,
		/*ipf*/      1,
		/*int type*/ INT_TYPE_INT,
		/*int cb*/   nullptr,           // timer drives bwidow_interrupt
		/*r8*/       SpaceDuelRead,
		/*w8*/       SpaceDuelWrite,
		/*pr*/       nullptr,
		/*pw*/       nullptr,
		/*r16*/      nullptr,
		/*w16*/      nullptr
	),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY()
)

AAE_DRIVER_VIDEO_CORE(45, VIDEO_TYPE_VECTOR | VECTOR_USES_COLOR, ORIENTATION_DEFAULT)
AAE_DRIVER_SCREEN(1024, 768, 0, 520, 0, 395)
AAE_DRIVER_RASTER_NONE()
AAE_DRIVER_HISCORE_NONE()
AAE_DRIVER_VECTORRAM(0x2000, 0x800)
AAE_DRIVER_NVRAM(atari_vg_earom_handler)
AAE_DRIVER_END()

// Space Duel (prototype)
AAE_DRIVER_BEGIN(drv_spacduel0, "spacduel0", "Space Duel (prototype)")
AAE_DRIVER_ROM(rom_spacduel0)
AAE_DRIVER_FUNCS(&init_spacduel, &run_bwidow, &end_bwidow)
AAE_DRIVER_INPUT(input_ports_spacduel)
AAE_DRIVER_SAMPLES_NONE()
AAE_DRIVER_ART(0)

AAE_DRIVER_CPUS(
	AAE_CPU_ENTRY(
		CPU_M6502, 1512000, 100, 1, INT_TYPE_INT, nullptr,
		SpaceDuelRead, SpaceDuelWrite,
		nullptr, nullptr, nullptr, nullptr
	),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY()
)

AAE_DRIVER_VIDEO_CORE(45, VIDEO_TYPE_VECTOR | VECTOR_USES_COLOR, ORIENTATION_DEFAULT)
AAE_DRIVER_SCREEN(1024, 768, 0, 520, 0, 395)
AAE_DRIVER_RASTER_NONE()
AAE_DRIVER_HISCORE_NONE()
AAE_DRIVER_VECTORRAM(0x2000, 0x800)
AAE_DRIVER_NVRAM(atari_vg_earom_handler)
AAE_DRIVER_END()

// Space Duel (Revision 1)
AAE_DRIVER_BEGIN(drv_spacduel1, "spacduel1", "Space Duel Revision 1")
AAE_DRIVER_ROM(rom_spacduel1)
AAE_DRIVER_FUNCS(&init_spacduel, &run_bwidow, &end_bwidow)
AAE_DRIVER_INPUT(input_ports_spacduel)
AAE_DRIVER_SAMPLES_NONE()
AAE_DRIVER_ART(0)

AAE_DRIVER_CPUS(
	AAE_CPU_ENTRY(
		CPU_M6502, 1512000, 100, 1, INT_TYPE_INT, nullptr,
		SpaceDuelRead, SpaceDuelWrite,
		nullptr, nullptr, nullptr, nullptr
	),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY()
)

AAE_DRIVER_VIDEO_CORE(45, VIDEO_TYPE_VECTOR | VECTOR_USES_COLOR, ORIENTATION_DEFAULT)
AAE_DRIVER_SCREEN(1024, 768, 0, 520, 0, 395)
AAE_DRIVER_RASTER_NONE()
AAE_DRIVER_HISCORE_NONE()
AAE_DRIVER_VECTORRAM(0x2000, 0x800)
AAE_DRIVER_NVRAM(atari_vg_earom_handler)
AAE_DRIVER_END()

// Black Widow
AAE_DRIVER_BEGIN(drv_bwidow, "bwidow", "Black Widow")
AAE_DRIVER_ROM(rom_bwidow)
AAE_DRIVER_FUNCS(&init_bwidow, &run_bwidow, &end_bwidow)
AAE_DRIVER_INPUT(input_ports_bwidow)
AAE_DRIVER_SAMPLES_NONE()
AAE_DRIVER_ART(0)

AAE_DRIVER_CPUS(
	AAE_CPU_ENTRY(
		CPU_M6502, 1512000, 100, 1, INT_TYPE_INT, nullptr,
		BwidowRead, BwidowWrite,
		nullptr, nullptr, nullptr, nullptr
	),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY()
)

AAE_DRIVER_VIDEO_CORE(60, VIDEO_TYPE_VECTOR | VECTOR_USES_COLOR, ORIENTATION_DEFAULT)
AAE_DRIVER_SCREEN(1024, 768, 0, 540, 0, 450)
AAE_DRIVER_RASTER_NONE()
AAE_DRIVER_HISCORE_NONE()
AAE_DRIVER_VECTORRAM(0x2000, 0x800)
AAE_DRIVER_NVRAM(atari_vg_earom_handler)
AAE_DRIVER_END()

// Gravitar (Revision 3)
AAE_DRIVER_BEGIN(drv_gravitar, "gravitar", "Gravitar (Revision 3)")
AAE_DRIVER_ROM(rom_gravitar)
AAE_DRIVER_FUNCS(&init_bwidow, &run_bwidow, &end_bwidow)
AAE_DRIVER_INPUT(input_ports_gravitar)
AAE_DRIVER_SAMPLES_NONE()
AAE_DRIVER_ART(0)

AAE_DRIVER_CPUS(
	AAE_CPU_ENTRY(
		/* 1.515 MHz as in legacy block */
		CPU_M6502, 1515000, 100, 1, INT_TYPE_INT, nullptr,
		BwidowRead, BwidowWrite,      // uses init_bwidow()
		nullptr, nullptr, nullptr, nullptr
	),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY()
)

AAE_DRIVER_VIDEO_CORE(60, VIDEO_TYPE_VECTOR | VECTOR_USES_COLOR, ORIENTATION_DEFAULT)
AAE_DRIVER_SCREEN(1000, 790, 0, 460, 0, 395)
AAE_DRIVER_RASTER_NONE()
AAE_DRIVER_HISCORE_NONE()
AAE_DRIVER_VECTORRAM(0x2000, 0x800)
AAE_DRIVER_NVRAM(atari_vg_earom_handler)
AAE_DRIVER_END()

// Gravitar (Revision 2)
AAE_DRIVER_BEGIN(drv_gravitar2, "gravitar2", "Gravitar (Revision 2)")
AAE_DRIVER_ROM(rom_gravitar2)
AAE_DRIVER_FUNCS(&init_bwidow, &run_bwidow, &end_bwidow)
AAE_DRIVER_INPUT(input_ports_gravitar)
AAE_DRIVER_SAMPLES_NONE()
AAE_DRIVER_ART(0)

AAE_DRIVER_CPUS(
	AAE_CPU_ENTRY(
		CPU_M6502, 1515000, 100, 1, INT_TYPE_INT, nullptr,
		BwidowRead, BwidowWrite,      // uses init_bwidow()
		nullptr, nullptr, nullptr, nullptr
	),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY()
)

AAE_DRIVER_VIDEO_CORE(60, VIDEO_TYPE_VECTOR | VECTOR_USES_COLOR, ORIENTATION_DEFAULT)
AAE_DRIVER_SCREEN(1000, 790, 0, 460, 0, 395)
AAE_DRIVER_RASTER_NONE()
AAE_DRIVER_HISCORE_NONE()
AAE_DRIVER_VECTORRAM(0x2000, 0x800)
AAE_DRIVER_NVRAM(atari_vg_earom_handler)
AAE_DRIVER_END()

// Gravitar (Prototype)
AAE_DRIVER_BEGIN(drv_gravp, "gravp", "Gravitar (Prototype)")
AAE_DRIVER_ROM(rom_gravp)
AAE_DRIVER_FUNCS(&init_bwidow, &run_bwidow, &end_bwidow)
AAE_DRIVER_INPUT(input_ports_gravitar)
AAE_DRIVER_SAMPLES_NONE()
AAE_DRIVER_ART(0)

AAE_DRIVER_CPUS(
	AAE_CPU_ENTRY(
		CPU_M6502, 1515000, 100, 1, INT_TYPE_INT, nullptr,
		BwidowRead, BwidowWrite,      // uses init_bwidow()
		nullptr, nullptr, nullptr, nullptr
	),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY()
)

AAE_DRIVER_VIDEO_CORE(60, VIDEO_TYPE_VECTOR | VECTOR_USES_COLOR, ORIENTATION_DEFAULT)
AAE_DRIVER_SCREEN(1000, 790, 0, 460, 0, 395)
AAE_DRIVER_RASTER_NONE()
AAE_DRIVER_HISCORE_NONE()
AAE_DRIVER_VECTORRAM(0x2000, 0x800)
AAE_DRIVER_NVRAM(atari_vg_earom_handler)
AAE_DRIVER_END()

// Lunar Battle (Prototype, Late)
AAE_DRIVER_BEGIN(drv_lunarbat, "lunarbat", "Lunar Battle (Prototype, Late)")
AAE_DRIVER_ROM(rom_lunarbat)
AAE_DRIVER_FUNCS(&init_bwidow, &run_bwidow, &end_bwidow)
AAE_DRIVER_INPUT(input_ports_lunarbat)
AAE_DRIVER_SAMPLES_NONE()
AAE_DRIVER_ART(0)

AAE_DRIVER_CPUS(
	AAE_CPU_ENTRY(
		CPU_M6502, 1512000, 100, 1, INT_TYPE_INT, nullptr,
		BwidowRead, BwidowWrite,      // uses init_bwidow()
		nullptr, nullptr, nullptr, nullptr
	),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY()
)

AAE_DRIVER_VIDEO_CORE(45, VIDEO_TYPE_VECTOR | VECTOR_USES_COLOR, ORIENTATION_DEFAULT)
AAE_DRIVER_SCREEN(1000, 790, 0, 460, 0, 395)
AAE_DRIVER_RASTER_NONE()
AAE_DRIVER_HISCORE_NONE()
AAE_DRIVER_VECTORRAM(0x2000, 0x800)
AAE_DRIVER_NVRAM(atari_vg_earom_handler)
AAE_DRIVER_END()

// Lunar Battle (Prototype, Early)
AAE_DRIVER_BEGIN(drv_lunarba1, "lunarba1", "Lunar Battle (Prototype, Early)")
AAE_DRIVER_ROM(rom_lunarba1)
AAE_DRIVER_FUNCS(&init_spacduel, &run_bwidow, &end_bwidow)
AAE_DRIVER_INPUT(input_ports_lunarba1)
AAE_DRIVER_SAMPLES_NONE()
AAE_DRIVER_ART(0)

AAE_DRIVER_CPUS(
	AAE_CPU_ENTRY(
		CPU_M6502, 1512000, 100, 1, INT_TYPE_INT, nullptr,
		SpaceDuelRead, SpaceDuelWrite,    // uses init_spacduel()
		nullptr, nullptr, nullptr, nullptr
	),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY()
)

AAE_DRIVER_VIDEO_CORE(45, VIDEO_TYPE_VECTOR | VECTOR_USES_COLOR, ORIENTATION_DEFAULT)
AAE_DRIVER_SCREEN(1000, 790, 0, 460, 0, 395)
AAE_DRIVER_RASTER_NONE()
AAE_DRIVER_HISCORE_NONE()
AAE_DRIVER_VECTORRAM(0x2000, 0x800)
AAE_DRIVER_NVRAM(atari_vg_earom_handler)
AAE_DRIVER_END()

AAE_REGISTER_DRIVER(drv_spacduel)
AAE_REGISTER_DRIVER(drv_spacduel0)
AAE_REGISTER_DRIVER(drv_spacduel1)
AAE_REGISTER_DRIVER(drv_bwidow)
AAE_REGISTER_DRIVER(drv_gravitar)
AAE_REGISTER_DRIVER(drv_gravitar2)
AAE_REGISTER_DRIVER(drv_gravp)
AAE_REGISTER_DRIVER(drv_lunarbat)
AAE_REGISTER_DRIVER(drv_lunarba1)
