#include "aae_mame_driver.h"
#include "galaxian_driver.h"
#include "old_mame_raster.h"
#include "driver_registry.h"
#include "galaxian_vid.h"
#include "galsnd_stream.h"

#pragma warning( disable : 4838 4003 )

extern unsigned char* galaxian_attributesram;
extern unsigned char* galaxian_bulletsram;
extern int galaxian_bulletsram_size;

static const char* galaxian_samples[] =
{
	"galaxian.zip",
	"death.wav",
	"shot.wav",
	0	/* end of array */
};


static struct rectangle spritevisiblearea =
{
	0, 28 * 8 - 1,
	2 * 8, 34 * 8 - 1
};

/*
static struct CustomSound_interface custom_interface =
{
	//galaxian_sh_start,
	//galaxian_sh_stop,
	//galaxian_sh_update
};
*/
static struct GfxLayout galaxian_charlayout =
{
	8,8,	/* 8*8 characters */
	256,	/* 256 characters */
	2,	/* 2 bits per pixel */
	{ 0, 256 * 8 * 8 },	/* the two bitplanes are separated */
	{ 0, 1, 2, 3, 4, 5, 6, 7 },
	{ 0 * 8, 1 * 8, 2 * 8, 3 * 8, 4 * 8, 5 * 8, 6 * 8, 7 * 8 },
	8 * 8	/* every char takes 8 consecutive bytes */
};
static struct GfxLayout galaxian_spritelayout =
{
	16,16,	/* 16*16 sprites */
	64,	/* 64 sprites */
	2,	/* 2 bits per pixel */
	{ 0, 64 * 16 * 16 },	/* the two bitplanes are separated */
	{ 0, 1, 2, 3, 4, 5, 6, 7,
			8 * 8 + 0, 8 * 8 + 1, 8 * 8 + 2, 8 * 8 + 3, 8 * 8 + 4, 8 * 8 + 5, 8 * 8 + 6, 8 * 8 + 7 },
	{ 0 * 8, 1 * 8, 2 * 8, 3 * 8, 4 * 8, 5 * 8, 6 * 8, 7 * 8,
			16 * 8, 17 * 8, 18 * 8, 19 * 8, 20 * 8, 21 * 8, 22 * 8, 23 * 8 },
	32 * 8	/* every sprite takes 32 consecutive bytes */
};

static struct GfxLayout bulletlayout =
{
	/* there is no gfx ROM for this one, it is generated by the hardware */
	3,1,	/* 3*1 line */
	1,	/* just one */
	1,	/* 1 bit per pixel */
	{ 0 },
	{ 2, 2, 2 },	/* I "know" that this bit of the */
	{ 0 },			/* graphics ROMs is 1 */
	0	/* no use */
};

struct GfxDecodeInfo galaxian_gfxdecodeinfo[] =
{
	{ REGION_GFX1, 0x0000, &galaxian_charlayout,    0,  8 },
	{ REGION_GFX1, 0x0000, &galaxian_spritelayout,  0,  8 },
	{ REGION_GFX1, 0x0000, &bulletlayout, 8 * 4, 2 },
	{ -1 } /* end of array */
};

//SOUND

// --- Streaming Galaxian sound: bus write shims -> galsnd_stream ---
WRITE_HANDLER(galaxian_stream_lfo_freq_w)
{
	// 0x6004..0x6007 => offset 0..3
	const int offset = (int)(address);
	galaxian_lfo_freq_w(offset, data);
}

WRITE_HANDLER(galaxian_stream_background_enable_w)
{
	// 0x6800..0x6802 => offset 0..2
	const int offset = (int)(address);
	galaxian_background_enable_w(offset, data & 1);
}

WRITE_HANDLER(galaxian_stream_noise_enable_w)
{
	// 0x6803
	//galaxian_noise_enable_w(data & 1);
}

WRITE_HANDLER(galaxian_stream_shoot_enable_w)
{
	// 0x6805 (rising edge triggers)
	//galaxian_shoot_enable_w(data & 1);
}

WRITE_HANDLER(galaxian_stream_vol_w)
{
	// 0x6806..0x6807 => offset 0..1 (2-bit volume)
	const int offset = (int)(address);
	galaxian_vol_w(offset, data & 1);
}

WRITE_HANDLER(galaxian_stream_pitch_w)
{
	// 0x7800 (0xff = mute)
	galaxian_pitch_w((int)data);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//MAIN HANDLERS
//////////////////////////////////////////////////////////////
// 0x6805 — SHOOT: rising edge -> play sample once
WRITE_HANDLER(galaxian_sample_shoot_w)
{
	static int last = 0;
	const int bit = data & 1;
	const bool rising = (bit != 0) && (last == 0);
	if (rising) {
		sample_start(0, 1, /*loop=*/0);
	}
	last = bit;
}

// 0x6803 — BANG/HIT: rising edge -> play sample once
WRITE_HANDLER(galaxian_sample_bang_w)
{
	static int last = 0;
	const int bit = data & 1;
	const bool rising = (bit != 0) && (last == 0);
	if (rising) {
		sample_start(1, 0, /*loop=*/0);
	}
	last = bit;
}

WRITE_HANDLER(galaxian_stars_enable_w)
{
	galaxian_stars_w(address, data);
}
WRITE_HANDLER(galaxian_flip_screen_x_w)
{
	galaxian_flipx_w(address,data);
}
WRITE_HANDLER(galaxian_flip_screen_y_w)
{
	galaxian_flipy_w(address, data);
}

void run_galaxian()
{
	watchdog_reset_w(0, 0, 0);
	galaxian_vh_screenrefresh();
	galaxian_sh_update_stream();
}


MEM_READ(galaxian_readmem)
//{ 0x0000, 0x3fff, MRA_ROM},
//{ 0x4000, 0x47ff, MRA_RAM },
//{ 0x5000, 0x53ff, MRA_RAM },
//{ 0x5400, 0x57ff, galaxian_videoram_r },
//{ 0x5800, 0x58ff, MRA_RAM },
 {0x6000, 0x6000, ip_port_0_r},
{ 0x6800, 0x6800, ip_port_1_r },
{ 0x7000, 0x7000, ip_port_2_r },
//{ 0x7800, 0x78ff, MRA_ROM },//watchdog_reset_r },
MEM_END


MEM_WRITE(galaxian_writemem)
{
	0x0000, 0x27ff, MWA_ROM
},
//{ 0x4000, 0x47ff, MWA_RAM },
//{ 0x5000, 0x53ff, MWA_RAM, &galaxian_videoram },
//{ 0x5800, 0x583f, MWA_RAM, &galaxian_attributesram },
//{ 0x5840, 0x585f, MWA_RAM, &galaxian_spriteram, &galaxian_spriteram_size },
//{ 0x5860, 0x587f, MWA_RAM, &galaxian_bulletsram, &galaxian_bulletsram_size },
//{ 0x5880, 0x58ff, MWA_RAM },
//{ 0x6000, 0x6001, galaxian_leds_w },
//{ 0x6002, 0x6002, galaxian_coin_lockout_w },
//{ 0x6003, 0x6003, galaxian_coin_counter_w },
{ 0x6004, 0x6007, galaxian_stream_lfo_freq_w },
{ 0x6800, 0x6802, galaxian_stream_background_enable_w },
{ 0x6803, 0x6803, galaxian_sample_bang_w },
{ 0x6805, 0x6805, galaxian_sample_shoot_w },
{ 0x6806, 0x6807, galaxian_stream_vol_w },
{ 0x7001, 0x7001, interrupt_enable_w },
{ 0x7004, 0x7004, galaxian_stars_enable_w },
{ 0x7006, 0x7006, galaxian_flip_screen_x_w },
{ 0x7007, 0x7007, galaxian_flip_screen_y_w },
{ 0x7800, 0x7800, galaxian_stream_pitch_w }, 
MEM_END

PORT_READ(galaxian_readport)

PORT_END

PORT_WRITE(galaxian_writeport)

PORT_END



int init_galaxian(void)
{
	//init_z80(galaxian_readmem, galaxian_writemem, galaxian_readport, galaxian_writeport, CPU0);
	//FOR RASTER, VIDEORAM POINTER, SPRITERAM POINTER NEED TO BE SET MANUALLY
	galaxian_attributesram = &Machine->memory_region[0][0x5800];
	galaxian_bulletsram = &Machine->memory_region[0][0x5860];
	galaxian_bulletsram_size = 0x20;
	videoram = &Machine->memory_region[0][0x5000];
	videoram_size = 0x400;
	spriteram = &Machine->memory_region[0][0x5840];
	spriteram_size = 0x20;

	galaxian_sh_start_stream(nullptr);
	// Mid LFO and make sure background is on from frame 0:
    //galaxian_lfo_freq_w(0, 0);  // bit0 = 0
//	galaxian_lfo_freq_w(1, 0);  // bit1 = 0
//	galaxian_lfo_freq_w(2, 0);  // bit2 = 0
//	galaxian_lfo_freq_w(3, 1);  // bit3 = 1  => value 8

	galaxian_background_enable_w(0, 1);
	galaxian_background_enable_w(1, 1);
	galaxian_background_enable_w(2, 1);
	galaxian_vh_start();

	return 0;
}


void end_galaxian()
{
	galaxian_sh_stop_stream();
}


INPUT_PORTS_START(galaxian)
PORT_START  ("IN0")    /* IN0 */
PORT_BIT(0x01, IP_ACTIVE_HIGH, IPT_COIN1)
PORT_BIT(0x02, IP_ACTIVE_HIGH, IPT_COIN2)
PORT_BIT(0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_2WAY)
PORT_BIT(0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_2WAY)
PORT_BIT(0x10, IP_ACTIVE_HIGH, IPT_BUTTON1)
PORT_DIPNAME(0x20, 0x00, DEF_STR(Cabinet))
PORT_DIPSETTING(0x00, DEF_STR(Upright))
PORT_DIPSETTING(0x20, DEF_STR(Cocktail))
PORT_SERVICE(0x40, IP_ACTIVE_HIGH)
PORT_BIT(0x80, IP_ACTIVE_HIGH, IPT_SERVICE)

PORT_START("IN0")      /* IN1 */
PORT_BIT(0x01, IP_ACTIVE_HIGH, IPT_START1)
PORT_BIT(0x02, IP_ACTIVE_HIGH, IPT_START2)
PORT_BIT(0x04, IP_ACTIVE_HIGH, IPT_JOYSTICK_LEFT | IPF_2WAY | IPF_COCKTAIL)
PORT_BIT(0x08, IP_ACTIVE_HIGH, IPT_JOYSTICK_RIGHT | IPF_2WAY | IPF_COCKTAIL)
PORT_BIT(0x10, IP_ACTIVE_HIGH, IPT_BUTTON1 | IPF_COCKTAIL)
PORT_BIT(0x20, IP_ACTIVE_HIGH, IPT_UNKNOWN)	/* probably unused */
PORT_DIPNAME(0xc0, 0x00, DEF_STR(Coinage))
PORT_DIPSETTING(0x40, DEF_STR(2C_1C))
PORT_DIPSETTING(0x00, DEF_STR(1C_1C))
PORT_DIPSETTING(0x80, DEF_STR(1C_2C))
PORT_DIPSETTING(0xc0, DEF_STR(Free_Play))

PORT_START   ("DSW0")   /* DSW0 */
PORT_DIPNAME(0x03, 0x00, DEF_STR(Bonus_Life))
PORT_DIPSETTING(0x00, "7000")
PORT_DIPSETTING(0x01, "10000")
PORT_DIPSETTING(0x02, "12000")
PORT_DIPSETTING(0x03, "20000")
PORT_DIPNAME(0x04, 0x04, DEF_STR(Lives))
PORT_DIPSETTING(0x00, "2")
PORT_DIPSETTING(0x04, "3")
PORT_DIPNAME(0x08, 0x00, DEF_STR(Unknown))
PORT_DIPSETTING(0x00, DEF_STR(Off))
PORT_DIPSETTING(0x08, DEF_STR(On))
PORT_BIT(0xf0, IP_ACTIVE_HIGH, IPT_UNUSED)
INPUT_PORTS_END

ROM_START(galaxian)
ROM_REGION(0x10000, REGION_CPU1, 0)	/* 64k for code */
ROM_LOAD("galmidw.u", 0x0000, 0x0800, CRC(745e2d61) SHA1(e65f74e35b1bfaccd407e168ea55678ae9b68edf))
ROM_LOAD("galmidw.v", 0x0800, 0x0800, CRC(9c999a40) SHA1(02fdcd95d8511e64c0d2b007b874112d53e41045))
ROM_LOAD("galmidw.w", 0x1000, 0x0800, CRC(b5894925) SHA1(0046b9ed697a34d088de1aead8bd7cbe526a2396))
ROM_LOAD("galmidw.y", 0x1800, 0x0800, CRC(6b3ca10b) SHA1(18d8714e5ef52f63ba8888ecc5a25b17b3bf17d1))
ROM_LOAD("7l", 0x2000, 0x0800, CRC(1b933207) SHA1(8b44b0f74420871454e27894d0f004859f9e59a9))

ROM_REGION(0x1000, REGION_GFX1, 0)
ROM_LOAD("1h.bin", 0x0000, 0x0800, CRC(39fb43a4) SHA1(4755609bd974976f04855d51e08ec0d62ab4bc07))
ROM_LOAD("1k.bin", 0x0800, 0x0800, CRC(7e3f56a2) SHA1(a9795d8b7388f404f3b0e2c6ce15d713a4c5bafa))

ROM_REGION(0x0020, REGION_PROMS, 0)
ROM_LOAD("6l.bpr", 0x0000, 0x0020, CRC(c3ac9467) SHA1(f382ad5a34d282056c78a5ec00c30ec43772bae2))
ROM_END


// Galaxian (Midway)
AAE_DRIVER_BEGIN(drv_galaxian, "galaxian", "Galaxian (Midway)")
AAE_DRIVER_ROM(rom_galaxian)
AAE_DRIVER_FUNCS(&init_galaxian, &run_galaxian, &end_galaxian)
AAE_DRIVER_INPUT(input_ports_galaxian)
AAE_DRIVER_SAMPLES(galaxian_samples)
AAE_DRIVER_ART_NONE()

AAE_DRIVER_CPUS(
	AAE_CPU_ENTRY(
		/*type*/     CPU_MZ80,
		/*freq*/     3072000,
		/*div*/      100,
		/*ipf*/      1,
		/*int type*/ INT_TYPE_INT,
		/*int cb*/   &galaxian_vh_interrupt,
		/*r8*/       galaxian_readmem,
		/*w8*/       galaxian_writemem,
		/*pr*/       galaxian_readport,
		/*pw*/       galaxian_writeport,
		/*r16*/      nullptr,
		/*w16*/      nullptr
	),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY(),
	AAE_CPU_NONE_ENTRY()
)

AAE_DRIVER_VIDEO_CORE(60, VIDEO_TYPE_RASTER_COLOR | VIDEO_SUPPORTS_DIRTY, ORIENTATION_ROTATE_270 | ORIENTATION_FLIP_X)
AAE_DRIVER_SCREEN(32 * 8, 32 * 8, 0 * 8, 32 * 8 - 1, 2 * 8, 30 * 8 - 1)
AAE_DRIVER_RASTER(galaxian_gfxdecodeinfo, 32 + 64, 8 * 4 + 2 * 2, galaxian_vh_convert_color_prom)
AAE_DRIVER_HISCORE_NONE()
AAE_DRIVER_VECTORRAM(0, 0)
AAE_DRIVER_NVRAM_NONE()
AAE_DRIVER_END()


AAE_REGISTER_DRIVER(drv_galaxian)


/***************************************************************************

  Game driver(s)

***************************************************************************/
